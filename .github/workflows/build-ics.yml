name: Build ICS from Microsoft Graph

on:
  schedule:
    - cron: "*/5 * * * *"   # every 5 minutes
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build calendar.ics from Graph
        env:
          TENANT_ID: ${{ secrets.TENANT_ID }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          USER_UPN: ${{ secrets.USER_UPN }}
        run: |
          cat > build-ics.js <<'EOF'
          const fs = require('fs');

          const { TENANT_ID, CLIENT_ID, CLIENT_SECRET, USER_UPN } = process.env;

          async function getToken() {
            const body = new URLSearchParams({
              grant_type: 'client_credentials',
              client_id: CLIENT_ID,
              client_secret: CLIENT_SECRET,
              scope: 'https://graph.microsoft.com/.default'
            });
            const r = await fetch(`https://login.microsoftonline.com/${TENANT_ID}/oauth2/v2.0/token`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
              body
            });
            if (!r.ok) throw new Error(`Token HTTP ${r.status}`);
            return r.json();
          }

          function icsEscape(s) {
            if (!s) return '';
            return String(s)
              .replace(/\\/g, '\\\\')
              .replace(/;/g, '\\;')
              .replace(/,/g, '\\,')
              .replace(/\r?\n/g, '\\n');
          }

          function toUtcStamp(iso) {
            const d = new Date(iso.endsWith('Z') ? iso : iso + 'Z');
            const pad = n => String(n).padStart(2,'0');
            return (
              d.getUTCFullYear() +
              pad(d.getUTCMonth()+1) +
              pad(d.getUTCDate()) + 'T' +
              pad(d.getUTCHours()) +
              pad(d.getUTCMinutes()) +
              pad(d.getUTCSeconds()) + 'Z'
            );
          }

          async function fetchEvents(accessToken) {
            const now = new Date();
            const start = new Date(now.getTime() - 90*24*3600*1000);   // past 90 days
            const end   = new Date(now.getTime() + 365*24*3600*1000);  // next year
            const headers = {
              'Authorization': `Bearer ${accessToken}`,
              'Prefer': 'outlook.timezone="UTC"'
            };
            let url = `https://graph.microsoft.com/v1.0/users/${encodeURIComponent(USER_UPN)}` +
                      `/calendarView?startDateTime=${start.toISOString()}&endDateTime=${end.toISOString()}` +
                      `&$top=1000`;
            let all = [];
            while (url) {
              const r = await fetch(url, { headers });
              if (!r.ok) throw new Error(`Graph HTTP ${r.status}`);
              const j = await r.json();
              all = all.concat(j.value || []);
              url = j['@odata.nextLink'] || null;
            }
            return all;
          }

          function buildICS(events) {
            const nowStamp = toUtcStamp(new Date().toISOString());
            const L = [];
            L.push('BEGIN:VCALENDAR');
            L.push('PRODID:-//Calendar Mirror//EN');
            L.push('VERSION:2.0');
            L.push('CALSCALE:GREGORIAN');
            L.push('METHOD:PUBLISH');
            L.push('X-WR-CALNAME:Work (Graph)');
            L.push('X-WR-TIMEZONE:Europe/London');

            for (const ev of events) {
              const uid = (ev.id || Math.random().toString(36).slice(2)) + '@graph.microsoft.com';
              const summary = icsEscape(ev.subject || '(No title)');
              const desc = icsEscape(ev.bodyPreview || '');
              const location = icsEscape(ev.location?.displayName || '');
              const showAs = (ev.showAs || '').toLowerCase();
              const transp = showAs === 'free' ? 'TRANSPARENT' : 'OPAQUE';
              const isAllDay = !!ev.isAllDay;

              const dtStart = ev.start?.dateTime;
              const dtEnd   = ev.end?.dateTime;
              if (!dtStart || !dtEnd) continue;

              L.push('BEGIN:VEVENT');
              L.push(`UID:${uid}`);
              L.push(`DTSTAMP:${nowStamp}`);
              L.push(`SUMMARY:${summary}`);

              if (isAllDay) {
                const d1 = dtStart.slice(0,10).replace(/-/g,'');
                const d2 = dtEnd.slice(0,10).replace(/-/g,'');
                L.push(`DTSTART;VALUE=DATE:${d1}`);
                L.push(`DTEND;VALUE=DATE:${d2}`);
              } else {
                L.push(`DTSTART:${toUtcStamp(dtStart)}`);
                L.push(`DTEND:${toUtcStamp(dtEnd)}`);
              }

              if (location) L.push(`LOCATION:${location}`);
              if (desc)     L.push(`DESCRIPTION:${desc}`);
              L.push('STATUS:CONFIRMED');
              L.push(`TRANSP:${transp}`);
              L.push('END:VEVENT');
            }

            L.push('END:VCALENDAR');
            return L.join('\r\n') + '\r\n';
          }

          (async () => {
            const tok = await getToken();
            const events = await fetchEvents(tok.access_token);
            const ics = buildICS(events);
            require('fs').writeFileSync('calendar.ics', ics, 'utf8');
            console.log(`Built calendar.ics with ${events.length} events`);
          })().catch(e => { console.error(e); process.exit(1); });
          EOF

          node build-ics.js

      - name: Commit calendar.ics
        run: |
          git config user.name "graph-ics-bot"
          git config user.email "bot@example.com"
          git add calendar.ics
          git commit -m "Update calendar.ics" || echo "No changes"
          git push
